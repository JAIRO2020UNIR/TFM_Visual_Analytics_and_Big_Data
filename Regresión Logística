# modelo de Regresión Logística
# con métricas y gráficas en sklearn
# ============================================

# 1. Importación de librerías necesarias

import numpy as np
import pandas as pd
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score,
    classification_report, confusion_matrix, roc_curve, auc,
    precision_recall_curve
)
import joblib  # para guardar y cargar el modelo
import matplotlib.pyplot as plt
import seaborn as sns

# 2. Cargar dataset
data = load_breast_cancer()
X, y = data.data, data.target

# 3. División en entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 4. Modelo de Regresión Logística
model = LogisticRegression(max_iter=5000)
model.fit(X_train, y_train)

# 5. Predicciones
y_pred = model.predict(X_test)
y_prob = model.predict_proba(X_test)[:, 1]  # Probabilidades para clase positiva

# 6. Métricas numéricas
acc = accuracy_score(y_test, y_pred)
prec = precision_score(y_test, y_pred)
rec = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("===== MÉTRICAS DEL MODELO Regresión logistica =====")
print(f"Accuracy  : {acc:.4f}")
print(f"Precisión : {prec:.4f}")
print(f"Sensibilidad (Recall): {rec:.4f}")
print(f"F1-score  : {f1:.4f}")
print("\nReporte de Clasificación:\n", classification_report(y_test, y_pred, target_names=data.target_names))

# 7. Matriz de Confusión (valores + gráfica)
cm = confusion_matrix(y_test, y_pred)
print("\nMatriz de Confusión:\n", cm)

plt.figure(figsize=(5,4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=data.target_names, yticklabels=data.target_names)
plt.xlabel("Predicción")
plt.ylabel("Real")
plt.title("Matriz de Confusión")
plt.show()

# 8. Curva ROC y AUC
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(6,5))
plt.plot(fpr, tpr, color="blue", label=f"AUC = {roc_auc:.4f}")
plt.plot([0,1], [0,1], color="red", linestyle="--")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("Curva ROC")
plt.legend(loc="lower right")
plt.show()

# 9. Curva Precision-Recall
precisions, recalls, thresholds = precision_recall_curve(y_test, y_prob)

plt.figure(figsize=(6,5))
plt.plot(recalls, precisions, marker=".")
plt.xlabel("Recall")
plt.ylabel("Precision")
plt.title("Curva Precision-Recall")
plt.show()

# 10. Distribución de probabilidades
plt.figure(figsize=(6,5))
sns.histplot(y_prob[y_test==0], color="red", label="Maligno (0)", kde=True, stat="density", bins=25)
sns.histplot(y_prob[y_test==1], color="green", label="Benigno (1)", kde=True, stat="density", bins=25)
plt.xlabel("Probabilidad predicha")
plt.title("Distribución de Probabilidades por Clase")
plt.legend()
plt.show()

# 8. Guardamos el modelo entrenado en un archivo
joblib.dump(log_reg, "modelo_regresion_logistica.pkl")
print("\n Modelo guardado como 'modelo_regresion_logistica.pkl'")

# 9.Cargar el modelo para usarlo en producción
modelo_cargado = joblib.load("modelo_regresion_logistica.pkl")

# Probamos que funciona
nueva_prediccion = modelo_cargado.predict([X_test[0]])
print("\nPredicción de ejemplo con modelo cargado:", nueva_prediccion, 
      "=>", data.target_names[nueva_prediccion][0])
